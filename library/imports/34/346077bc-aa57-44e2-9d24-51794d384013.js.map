{"version":3,"sources":["assets\\script\\enemyListener.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;;;;;;;;;;;;;;;;;;;;;AAE5E,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAsC,4BAAY;IAAlD;QAAA,qEAkCC;QA/BG,YAAM,GAAW,IAAI,CAAC;;QA8BtB,iBAAiB;IACrB,CAAC;IA7BG,wBAAwB;IAExB,eAAe;IAEf,wBAAK,GAAL;IAEA,CAAC;IACD,mCAAgB,GAAhB,UAAiB,KAAK,EAAE,IAAI;QACxB,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;YACpF,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;YAE5D,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;SACxD;IACL,CAAC;IACD,kCAAe,GAAf,UAAgB,KAAK,EAAE,IAAI;QACvB,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;YACpF,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;YAC5D,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3D;QAGD,yEAAyE;QACzE,kEAAkE;QAClE,IAAI;IAER,CAAC;IA5BD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;4CACI;IAHL,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAkC5B;IAAD,eAAC;CAlCD,AAkCC,CAlCqC,EAAE,CAAC,SAAS,GAkCjD;kBAlCoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n    @property(cc.Node)\n    target:cc.Node = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n    onCollisionEnter(other, self) {\n        if (self.node.getComponent('enemyListener') && other.node.getComponent('heroListener')) {\n            let target = self.node.getComponent('enemyListener').target;\n\n            target.getComponent('enemy').attack(other.node);\n            target.getComponent('enemy').arrHero.push(other.node)\n        }\n    }\n    onCollisionExit(other, self) {\n        if (self.node.getComponent('enemyListener') && other.node.getComponent('heroListener')) {\n            let target = self.node.getComponent('enemyListener').target;\n            target.getComponent('enemy').exitTarget(other.node._id);\n        }\n\n\n        // if(other.node.getComponent(EL)&& other.node.getComponent(EL).target) {\n        //     this.target.getComponent(hero).removeEnemy(other.node._id);\n        // }\n\n    }\n\n    // update (dt) {}\n}\n"]}